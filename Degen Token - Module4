// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, Ownable {
    event ItemRedeemed(address indexed redeemer, string itemName, uint256 quantity);

    struct Item {
        uint256 requiredTokens;
        uint256 availableQuantity;
    }

    mapping(string => Item) public items;
    mapping(address => mapping(string => uint256)) public redeemedItems;

    constructor(address initialOwner) Ownable(initialOwner) ERC20("Degen", "DGN") {}

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    function transfer(address to, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), to, amount);
        return true;
    }

    function addItem(string memory itemName, uint256 requiredTokens, uint256 quantity) external onlyOwner {
        require(quantity > 0, "Quantity must be greater than zero");
        require(requiredTokens > 0, "Required tokens must be greater than zero");

        items[itemName].requiredTokens = requiredTokens;
        items[itemName].availableQuantity += quantity;
    }

    function redeemItem(string memory itemName, uint256 quantity) external {
        Item storage item = items[itemName];
        require(item.availableQuantity >= quantity, "Not enough item quantity available");
        require(quantity > 0, "Quantity must be greater than zero");

        uint256 totalCost = item.requiredTokens * quantity;
        require(balanceOf(msg.sender) >= totalCost, "Not enough Degen tokens");

        _burn(msg.sender, totalCost);
        item.availableQuantity -= quantity;
        redeemedItems[msg.sender][itemName] += quantity;

        emit ItemRedeemed(msg.sender, itemName, quantity);
    }

    function checkItemAvailability(string memory itemName) external view returns (uint256) {
        return items[itemName].availableQuantity;
    }

    function checkRedeemedItems(address redeemer, string memory itemName) external view returns (uint256) {
        return redeemedItems[redeemer][itemName];
    }
}
