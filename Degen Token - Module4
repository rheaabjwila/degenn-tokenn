// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, Ownable {
    event BookBorrowed(address indexed borrower, string bookTitle, uint256 quantity);
    event BookReturned(address indexed returner, string bookTitle, uint256 quantity);

    struct Book {
        uint256 availableCopies;
    }

    mapping(string => Book) public books;

    constructor(address initialOwner) Ownable(initialOwner) ERC20("Degen", "DGN") {}

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    function transfer(address to, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), to, amount);
        return true;
    }

    function addBook(string memory bookTitle, uint256 quantity) external onlyOwner {
        require(quantity > 0, "Quantity must be greater than zero");

        books[bookTitle].availableCopies += quantity;

        emit BookBorrowed(msg.sender, bookTitle, quantity);
    }

    function borrowBook(string memory bookTitle, uint256 quantity) external {
        Book storage book = books[bookTitle];
        require(book.availableCopies >= quantity, "Not enough copies available");
        require(quantity > 0, "Quantity must be greater than zero");

        book.availableCopies -= quantity;

        emit BookBorrowed(msg.sender, bookTitle, quantity);
    }

    function returnBook(string memory bookTitle, uint256 quantity) external {
        require(quantity > 0, "Quantity must be greater than zero");

        books[bookTitle].availableCopies += quantity;

        emit BookReturned(msg.sender, bookTitle, quantity);
    }

    function checkAvailableCopies(string memory bookTitle) external view returns (uint256) {
        return books[bookTitle].availableCopies;
    }
}
